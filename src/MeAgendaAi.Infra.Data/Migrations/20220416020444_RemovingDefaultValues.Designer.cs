// <auto-generated />
using System;
using MeAgendaAi.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeAgendaAi.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220416020444_RemovingDefaultValues")]
    partial class RemovingDefaultValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeAgendaAi.Domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DT_CREATED_AT");

                    b.Property<int>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DT_LAST_UPDATED_AT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PASS_PASSWORD");

                    b.HasKey("Id");

                    b.ToTable("TB_USERS", (string)null);
                });

            modelBuilder.Entity("MeAgendaAi.Domains.Entities.Company", b =>
                {
                    b.HasBaseType("MeAgendaAi.Domains.Entities.User");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)")
                        .HasColumnName("DSC_DESCRIPTION");

                    b.Property<short>("LimitCancelHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("TIME_LIMIT_CANCEL_HOURS");

                    b.HasIndex("CNPJ")
                        .IsUnique()
                        .HasDatabaseName("IN_COMPANY_CNPJ");

                    b.ToTable("TB_COMPANY", (string)null);
                });

            modelBuilder.Entity("MeAgendaAi.Domains.Entities.PhysicalPerson", b =>
                {
                    b.HasBaseType("MeAgendaAi.Domains.Entities.User");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CPF");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RG");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasDatabaseName("IN_PHYSICAL_PERSON_CPF");

                    b.ToTable("TB_PHYSICAL_PERSON", (string)null);
                });

            modelBuilder.Entity("MeAgendaAi.Domains.Entities.User", b =>
                {
                    b.OwnsOne("MeAgendaAi.Domains.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("EMAIL");

                            b1.HasKey("UserId");

                            b1.HasIndex("Address")
                                .IsUnique()
                                .HasDatabaseName("IN_USERS_EMAIL");

                            b1.ToTable("TB_USERS");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("MeAgendaAi.Domains.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("varchar(60)")
                                .HasColumnName("NM_FIRST_NAME");

                            b1.Property<string>("Surname")
                                .HasMaxLength(80)
                                .HasColumnType("varchar(80)")
                                .HasColumnName("NM_LAST_NAME");

                            b1.HasKey("UserId");

                            b1.ToTable("TB_USERS");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("MeAgendaAi.Domains.Entities.Company", b =>
                {
                    b.HasOne("MeAgendaAi.Domains.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("MeAgendaAi.Domains.Entities.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeAgendaAi.Domains.Entities.PhysicalPerson", b =>
                {
                    b.HasOne("MeAgendaAi.Domains.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("MeAgendaAi.Domains.Entities.PhysicalPerson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
