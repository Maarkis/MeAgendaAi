using MeAgendaAi.Domains.Entities;
using MeAgendaAi.Domains.RequestAndResponse;

namespace MeAgendaAi.Domains.Interfaces.Services
{
    /// <summary>
    /// Agreement for User Service.
    /// </summary>
    public interface IUserService : IService<User>
    {
        /// <summary>
        /// Authenticate the <paramref name="User"/> to the system by e-mail and password.
        /// </summary>
        /// <param name="email">E-mail.</param>
        /// <param name="password">Password.</param>
        /// <returns>
        /// Returns object with user information, token and refresh token.
        /// </returns>
        Task<AuthenticateResponse?> AuthenticateAsync(string email, string password);

        /// <summary>
        /// Authenticate the <paramref name="User"/> to the system by <c>Refresh token</c>.
        /// </summary>
        /// <param name="refreshToken">Token generated by email and password authentication.</param>
        /// <returns>
        /// Returns object with user information, token and refresh token.
        /// </returns>
        Task<AuthenticateResponse?> AuthenticateByRefreshTokenAsync(string refreshToken);

        /// <summary>
        /// Get a user by email.
        /// </summary>
        /// <param name="email">E-mail.</param>
        /// <returns>
        /// Return an <typeparamref name="User"/> if <c>found</c>. Return <c>default(<typeparamref name="User"/>)</c> if not found.
        /// </returns>
        Task<User?> GetByEmailAsync(string email);

        /// <summary>
        /// Check if a user exists by e-mail.
        /// </summary>
        /// <param name="email">E-mail of <paramref name="User"/>.</param>
        /// <returns>
        /// Returns <c>true</c> if it exists. Returns <c>false</c> if it does not exist.
        /// </returns>
        Task<bool> HasUser(string email);

        /// <summary>
        /// Checks if the password and password confirmation are not the same.
        /// </summary>
        /// <param name="password">Password.</param>
        /// <param name="confirmPassword">Confirm password.</param>
        /// <returns>
        /// Returns <c>true</c> not if it is the same. Returns <c>false</c> if it is the same.
        /// </returns>
        bool NotSamePassword(string password, string confirmPassword);

        /// <summary>
        /// Checks if the password and password confirmation are the same.
        /// </summary>
        /// <param name="password">Password.</param>
        /// <param name="confirmPassword">Confirm password.</param>
        /// <returns>
        /// Returns <c>true</c> if it is the same. Returns <c>false</c> not if it is the same.
        /// </returns>
        bool SamePassword(string password, string confirmPassword);
    }
}